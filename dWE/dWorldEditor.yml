################################################################################
#
#                            d W o r l d E d i t o r
#
#
#   Authors: |Anthony|, mcmonkey
#   Version: 0.22
#   dScript Version: 0.9.8-DEV-b535
#
#
#
#--- About this script
#
#  This is a basic recreation of WorldEdit in denizen. The wand and selection
#  tools are very useable. The command system is fairly robust, lacking only
#  TAB Completion. Permission system is in place. Editing tools are severly
#  lacking still.
#
#--- Permission nodes
#  dwe.admin:  All commands. Same as OP
#  dwe.chunk:  Set the chunk you are standing in as your selection
#  dwe.contract:  Contract your region selection
#  dwe.expand:  Expand your region selection
#  dwe.inset:  Inset your region selection
#  dwe.outset:  Outset your region selection
#  dwe.pos:  Use commands to set selection positions
#  dwe.set:  Set the blocks in a selection
#  dwe.shift:  Shift your selection
#  dwe.show:  Show your current region selection
#  dwe.wand:  Get the region selection wand
#  dwe.undo:  Undo previous edits
#
#
# TODO:
#  - TAB Completion
#  - Command Meta
#    - Description
#    - Usage
#    - Examples
#  - Editing & Clipboard
#    - Copy
#    - Paste
#    - Stack
#    - Rotate
#  - Permissions
#    - Permissions for each individual command
#    - Parent permissions for categories (selection,tool,navigation)
#  - Config File
#    - Maxblocks to change per operation
#    - Undo history size
#    - async-blockedit
#    - hpos max distance
#
#
################################################################################
#
#  dWorldEditor Version
#
#  Handles dWE Versioning Checks
#
dWE_Version:
  type: version
  author: Anthony
  name: dWorldEditor
  version: 0.22
  description: Denizen World Editor
  id: 22

TabTesting:
  type: command
  name: tabtest
  script:
    - narrate "nonsense"

  tab complete:
    - narrate "test <c.args||null>"
    - determine 'li@a|b'
#
#  END dWorldEditor Version
#--------------------------------------
#
#
################################################################################
#
#  dWorldEditor Events
#
#  This should cover all dWE related world events.
#
dWE_Events:
  type: world
  debug: false
  events:
    on player clicks block:
      - if <c.item.scriptname.split[_].get[1].is[!=].to[dWE]||true> {
        - queue clear
        }
      - determine passively CANCELLED
      - inject <c.item.scriptname.as_script> instantly

    on server start:
      - inject locally load

    on scripts reloaded:
      - inject locally load

  load:
    - announce 'loading <server.list_scripts.filter[starts_with[s@dWE_Commands_]].parse[name].parse[after[dWE_Commands_]].alphanumeric.to_lowercase||li@>'
    - flag server 'dWE.Command_List:!'
    - flag server 'dWE.Command_List:|:<server.list_scripts.filter[starts_with[s@dWE_Commands_]].parse[name].parse[after[dWE_Commands_]].alphanumeric.to_lowercase||li@>'
#
#  END dWorldEditor Events
#--------------------------------------
#
#
################################################################################
#
#  dWorldEditor Messages
#
# This is the house for various output messages
#
# - These may or may not get moved to their respective command scripts
#
#--------------------------------------
#
dWE_Msg:
  type: item
  debug: false
  material: i@human_skull
  display name: "<&4>     [<&6>dWE<&4>]"
  lore:
  - <&5>Click for Help
  script:
    - run s@msgPrefixed 'def:dWE|%1%'

  set_Pos:
    - run s@msgPrefixed 'def:dWE|<&f>POS%pos%<&co>  <&3><&o><def[pos%pos%].replace[,].with[<&7>, <&3><&o>]>  <&7>(<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  set_pos1:
    - run s@msgPrefixed 'def:dWE|<&f>Selection started at <&3><&o><def[cuboid].min.simple.replace[,].with[<&7>,<&3><&o>]>'

  set_pos2:
    - run s@msgPrefixed 'def:dWE|<&f>Selection expanded to include<&co> <&3><&o><context.location.simple.replace[,].with[<&7>,<&3><&o>]> <&7>(<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  shift:
    - run s@msgPrefixed 'def:dWE|<&f>Shifted<&f>  <&7><&o>%direction% <&7>by <&o>%n% <&7>blocks (<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  expand:
    - define expandBy '<proc[selectionSize].context[%pos1%|%pos2%].sub[%oldSize%].as_int>'
    - run s@msgPrefixed 'def:dWE|<&f>Expanded<&f>  <&7><&o>%direction% <&7>by <&o>%expandBy% <&7>blocks (<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  contract:
    - define contractBy '<def[oldSize].sub[<proc[selectionSize].context[%pos1%|%pos2%]>].as_int>'
    - run s@msgPrefixed 'def:dWE|<&f>Contracted<&f>  <&7><&o>%direction% <&7>by <&o>%contractBy% <&7>blocks (<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  inset:
    - define insetBy '<def[oldSize].sub[<proc[selectionSize].context[%pos1%|%pos2%]>].as_int>'
    - run s@msgPrefixed 'def:dWE|<&f>Inset<&f>  <&7>by <&o>%insetBy% <&7>blocks (<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'

  outset:
    - define outsetBy '<proc[selectionSize].context[%pos1%|%pos2%].sub[%oldSize%].as_int>'
    - run s@msgPrefixed 'def:dWE|<&f>Outset<&f>  <&7>by <&o>%outsetBy% <&7>blocks (<&o><proc[selectionSize].context[%pos1%|%pos2%]><&7>)'
#
#  END dWorldEditor Messages
#--------------------------------------
#
#
################################################################################
#
#  dWorldEditor Wand Item
#
# This is the house for the wand item
#
#
#--------------------------------------
#
dWE_Wand:
  type: item
  debug: false
  material: m@wood_axe
  display name: dWE Region Selector
  lore:
  - <&7><&o>Left<&7> click to start a selection
  - <&7><&o>Right<&7> click to expand the selection

  script:
    - if !<player.has_permission[dwe.wand]||<player.is_op>> {
      - take i@dWE_Wand
      - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&a>You should not have this!' instantly
      - queue clear
      }
    - if <c.click_type.is[==].to[LEFT_CLICK_BLOCK]> {
      - define pos 1
      }
      else if <c.click_type.is[==].to[RIGHT_CLICK_BLOCK]> {
      - define pos 2
      }
      else {
      - queue clear
      }
    - define pos1 '<player.flag[dWEWand].as_list.get[1]||null>'
    - define pos2 '<player.flag[dWEWand].as_list.get[2]||null>'
    - define type '<player.flag[dWEWand_Type]||cuboid>'
    - if <li@cuboid|extender.contains[%type%]||false> {
      - inject locally %type%
      }
      else {
      - inject locally cuboid
      }

  cuboid:
    - if <context.location.simple.is[==].to[<def[pos%pos%]>]||false> {
      - run s@msgPrefixed 'def:dWE|<&c>pos%pos% is already set'
      - queue clear
      }
    - define pos%pos% '<context.location.simple>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:set_Pos

  extender:
    - define cuboid cu@%pos1%|%pos2%
    - if %pos% == 1 {
      - define cuboid cu@<context.location.simple>|<context.location.simple>
      }
      else {
      - if %pos1% == null {
        - run s@msgPrefixed 'def:dWE|<&c>You must begin a selection before you can expand it.'
        - queue clear
        }
      - define cuboid_old %cuboid%
      - define cuboid <def[cuboid].include[<context.location.simple>]>
      - if <def[cuboid_old]> == <def[cuboid]> {
        - run s@msgPrefixed 'def:dWE|<&c>That position is already included.'
        - queue clear
        }
      }
    - define pos1 '<def[cuboid].min>'
    - define pos2 '<def[cuboid].max>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:set_pos%pos%
#
#  END dWorldEditor Wand Item
#--------------------------------------
#
#
################################################################################
#
#  Denizen World Editor Command Script Containers
#
# Every command has its own script container. The root command functions mostly
# as link to specific commands and provides some initial processing.
#
#
#--------------------------------------
#
#  dWE Command Script Registrar
#
# The root command. Validates minor input and sends to command script.
#
dWE_Commands:
  type: command
  debug: false
  name: dwe
  description: Denizen World Editor
  usage: /dwe
  aliases: ''
  allowed help:
  - determine <player.has_permission[dwe.basic]||<player.is_op>>

  script:
    - define command '<c.args.get[1].escaped||help>'
    - define commands '<server.flag[dWE.Command_List].as_list||li@>'
    - define args '<c.args.get[2].to[<c.args.size>]||li@>'
    - if !<def[commands].contains[%command%]> || !<proc[dWE_HasPerm_Command].context[%command%|<player||server>]> {
      - inject s@dWE_Commands_Help
      }
    - inject s@dWE_Commands_%command%

  tab complete:
    - define command '<c.args.get[1]||>'
    - define commands '<server.flag[dWE.Command_List].as_list||li@>'
    - define args '<c.args.get[2].to[<c.args.size>]||li@>'
    - define spaces '<c.raw_args.to_list.count[ ]||0>'
    - if <def[commands].contains[%command%]> {
      - inject s@dWE_Commands_%command% 'p:tab complete'
      }
      else {
      - define commands '<def[commands].filter[starts_with[%command%]]||%commands%>'
      }
    - foreach %commands% {
      - if !<proc[dWE_HasPerm_Command].context[%command%|<player||server>]> {
        - define commands '<def[commands].exclude[%value%]||%commands%>'
        }
      }
    - if <def[commands].is_empty||true> {
      - determine 'li@'
      }
    - determine '<def[commands]||li@>'


# Preprocessors. Does some pre-processing and passes back to the calling command
  prerunA:
    - if <c.server||false> {
      - run s@msgPrefixed 'def:dWE|<&c>This command must be run as a player.'
      - queue clear
      }
    - if <c.alias> == '.%command%' {
      - if !<proc[dWE_HasPerm_Command].context[%command%|<player>]> {
        - inject s@dWE_Commands_Help p:helpList
        - queue clear
        }
      - define commands '<server.flag[dWE.Command_List].as_list||li@>'
      - define args "<c.args>"
      }

  prerunB:
    - if <c.server||false> {
      - run s@msgPrefixed 'def:dWE|<&c>This command must be run as a player.'
      - queue clear
      }
    - if <c.alias> == '.%command%' {
      - if !<proc[dWE_HasPerm_Command].context[%command%|<player>]> {
        - inject s@dWE_Commands_Help p:helpList
        - queue clear
        }
      - define commands '<server.flag[dWE.Command_List].as_list||li@>'
      - define args "<c.args>"
      }

    - define pos1 '<player.flag[dWEWand].get[1].as_location||null>'
    - define pos2 '<player.flag[dWEWand].get[2].as_location||null>'
    - if <def[pos1].is[==].to[null]>
      || <def[pos2].is[==].to[null]> {
      - run s@msgPrefixed 'def:dWE|<&c>No region selected!'
      - queue clear
      }
    - define oldSize '<proc[selectionSize].context[%pos1%|%pos2%]>'

#
#  END dWE Command Registrar
#--------------------------------------
#
#
################################################################################
#
#
#  dWorldEditor Command Scripts
#
# This section holds all of the commands for dWorldEditor. The root command /dwe
# takes many arguments but most of those arguments can also be run as individual
# commands. This results in dWorldEditor command args having a shorthand version
# in the form of /.arg
#

dWE_Commands_Help:
  type: command
  debug: false
  speed: 0
  name: .help
  description: Show dWorldEditor help
  usage: /.help
  aliases: ''
  allowed help:
  - determine <player.has_permission[dwe.basic]||<player.is_op>>

  data:
    description:
      - 'This is the help for dWorldEditor. The help files are here to help you. Help yourself by reading the help. It<&sq>s helpful. <&c>Seriously!'
      - ' '
      - 'Thorough TAB completion is available for all dWorldEditor commands, including help. Try it and see!'
    usage: '/dwe help <&lt>arg/<&ns><&gt>'
    examples:
      - '<&f>To show the <&a>second<&f> page of help for the <&2>help<&f> command'
      - '<&sp>'
      - '   <&e>/dwe help <&2>help <&a>2'
      - ' '
      - '<&f>To show the <&a>third<&f> page of the help files'
      - '<&sp>'
      - '   <&e>/dwe help <&a>3'
    permissions: []

  tab complete:
    - if !<def[command].exists> {
      - define commands '<server.flag[dWE.Command_List].as_list||li@>'
      - define args "<c.args>"
      }
    - define command '<def[args].get[1].escaped||>'
    - if <def[commands].contains[%command%]> {
      - determine 'li@'
      }
      else {
      - define commands '<def[commands].filter[starts_with[%command%]]||%commands%>'
      }
    - foreach %commands% {
      - if !<proc[dWE_HasPerm_Command].context[%command%|<player||server>]> {
        - define commands '<def[commands].exclude[%value%]||%commands%>'
        }
      }
    - if <def[commands].is_empty||true> {
      - determine 'li@'
      }
    - determine '<def[commands]||li@>'

  script:
    - if !<def[command].exists> {
      - define command 'help'
      }
    - inject s@dWE_Commands p:prerunA

    - define arg '<def[args].get[1].escaped||1>'
    - if <def[arg].is[matches].to[number]> {
      - define page '<def[arg].abs.round||1>'
      - inject s@dWE_Commands_Help p:helpList
      - queue clear
      }
    - if <def[commands].contains[%arg%]||false> {
      - define command '%arg%'
      - define page '<tern[<def[args].get[2].is[matches].to[number]||false>]:<def[args].get[2].abs.round>||1>'
      - inject s@dWE_Commands_Help p:helpCommand
      - queue clear
      }
    - inject s@dWE_Commands_Help p:helpList
    - queue clear

  helpList:
    # Filter the list of commands this player can use
    # Build the help documentation
    - define commands '<server.flag[dWE.Command_List].as_list||li@>'
    - define helpDoc 'li@'
    - foreach %commands% {
      - if !<proc[dWE_HasPerm_Command].context[%value%|<player||server>]> {
        - define commands '<def[commands].exclude[%value%]>'
        }
        else {
        - define helpDoc '<def[helpDoc].include[<def[value].to_titlecase><&co><&sp><&7><parse:<s@dWE_Commands_%value%.yaml_key[description]||Short Description>>|<&e.pad_left[4].with[<&sp>]><parse:<s@dWE_Commands_%value%.yaml_key[data.usage]||No usage info available!>>]>'
        }
      }
    - define script 'dwe'
    - define title 'dWorldEditor'
    - define subTitle '<&e>Help Files'
    - define pageHeight '10'
    - define pageWidth '52'
    - define paragraphs '<proc[paragraph].context[%pageWidth%|%helpDoc%]>'
    - run s@msgBoxed instantly 'def:%script%|%title%|%subTitle%|%page%|%pageWidth%|%pageHeight%|%paragraphs%'

  helpCommand:
    # Help for a specific command
    - define short '<parse:<s@dWE_Commands_%command%.yaml_key[description]||A not so useless description should be here!>>'
    - define desc '<parse:<s@dWE_Commands_%command%.yaml_key[data.description]||A not so useless description should be here!>>'
    - define usage '<parse:<s@dWE_Commands_%command%.yaml_key[data.usage]||No help for you!>>'
    - define examples '<parse:<s@dWE_Commands_%command%.yaml_key[data.examples]||No help for you!>>'

    - define script 'dwe'
    - define title 'dWorldEditor'
    - define subTitle '<&e>Help - <def[arg].to_titlecase>'
    - define pageHeight '10'
    - define pageWidth '52'
    - define paragraphs '<proc[paragraph].context[%pageWidth%|<&7>%short%| |%desc%| |<&b><&n>Usage<&co>| |<&e.pad_left[3].with[ ]>%usage%| |<&3><&n>Examples<&co>| |%examples%]>'
    - run s@msgBoxed 'def:%script%|%title%|%subTitle%|%page%|%pageWidth%|%pageHeight%|%paragraphs%'

dWE_Commands_About:
  type: command
  debug: false
  speed: 0
  name: .about
  description: Details about the project
  usage: /.about
  aliases: ''

  data:
    description:
      - 'dWorldEditor is a world editing system written with the Denizen Scripting Engine.'
      - ' '
      - 'Currently, it offers a robust set of area selection tools. The dWE Wand item provides an easy <&dq>click click<&dq> method for selecting a cuboid. It has two modes currently, cuboid and extender.'
      - ' '
      - 'Future development will bring more advanced editing tools, but for now be satisfied with kick-ass selection tools!'
    usage: '/dwe about'
    examples: []
    permissions: []

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'about'
      }
    - inject s@dWE_Commands p:prerunA
    - run s@msgBoxed 'def:dwe|dWorldEditor|About|<tern[<def[args].get[1].is[matches].to[number]||false>]:<def[args].get[1].abs.round>||1>|52|12|<proc[paragraph].context[52|<&7><parse:<s@dWE_Commands_%command%.yaml_key[description]>>| |<parse:<s@dWE_Commands_%command%.yaml_key[data.description]>>]>'


dWE_Commands_Show:
  type: command
  debug: false
  speed: 0
  name: .show
  description: Show your current dWE selection
  usage: /.show
  aliases: ''

  data:
    description: 'See an outline of the area you have selected. Currently shows blue stained glass for 10 seconds. The material and time are configurable, but not yet ;)'
    usage: '/dwe show'
    examples: []
    permissions:
      - admin
      - select
      - show

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'show'
      }
    - inject s@dWE_Commands p:prerunB
    - showfake <player.flag[dWE.show].split[/].get[1]||m@blue_stained_glass> <cu@%pos1%|%pos2%.outline> to:<player> d:<player.flag[dWE.show].split[/].get[2]||10>s

dWE_Commands_Wand:
  type: command
  debug: false
  speed: 0
  name: .wand
  description: Get the region wand
  usage: /.wand (-type [cuboid/extender])
  aliases: ''

  data:
    description:
      - 'The selection wand is the tool that you will use to select an area for editing. There are two types of selection wands to choose from.'
      - ' '
      - 'To use the cuboid selection wand, left click to set position 1 and right click to set position 2.'
      - ' '
      - 'To use the extender selection wand, left click to start the selection area. Subsequent right clicks will expand the selection to include the location you clicked.'
    usage: '/dwe wand (-type [cuboid/extender])'
    examples:
      - '<&f>To give yourself the wand'
      - '  <&e>/dwe wand'
      - ' '
      - '<&f>To change the wand type to extender'
      - '  <&e>/dwe wand -type extender'
    permissions:
      - admin
      - select
      - wand

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[wand|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'wand -type '
      - case '1':
        - define arg '<def[args].get[1]||>'
        - if '%arg%' != '-type ' {
          - determine '-type '
          }
      - case '2':
        - define arg2 '<def[args].get[2]||>'
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' != '-type' {
          - determine 'li@'
          }
        - if 'li@cuboid|extender' contains '%arg2%' {
          - determine 'li@'
          }
          else {
          - determine '<li@cuboid|extender.filter[starts_with[<def[arg2]>]]||li@cuboid|extender>'
          }
      - default:
        - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'wand'
      }
    - inject s@dWE_Commands p:prerunA

    - if <def[args].find[-type].is[OR_MORE].than[0]||false> {
      - define type <def[args].get[<def[args].find[-type].add[1].as_int>]||null>
      - if <li@cuboid|extender.contains[%type%]||false> {
        - run s@msgPrefixed 'def:dWE|<&7><&o>Now using the <&f><&o>%type% <&7><&o>selection wand'
        - flag player 'dWEWand_Type:%type%'
        }
        else {
        - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>Unknown wand type!'
        - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe -type <&6><&lb><&7>cuboid/extender<&6><&rb>'
        }
      - queue clear
      }
    - if <player.inventory.find_imperfect[<i@dWE_Wand>]> != '-1' {
      - run s@msgPrefixed 'def:dWE|<&c>You already have a wand!'
      }
      else {
      - give i@dWE_Wand
      }
    - define type '<player.flag[dWEWand_Type]||cuboid>'
    - choose '%type%':
      - case 'cuboid':
        - run s@msgPrefixed 'def:dWE|<&a>Left click to select pos1'
        - run s@msgPrefixed 'def:dWE|<&a>Right click to select pos2'
      - case 'extender':
        - run s@msgPrefixed 'def:dWE|<&a>Left click to start a selection,'
        - run s@msgPrefixed 'def:dWE|<&a>Right click to expand the selection.'
      - default:
        - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>Unknown wand type!'
        - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe -type <&6><&lb><&7>cuboid/extender<&6><&rb>'
    - queue clear

dWE_Commands_Pos1:
  type: command
  debug: false
  speed: 0
  name: .pos1
  description: Set position 1
  usage: /.pos1
  aliases: ''

  data:
    description: 'Sets the location you are standing at as position 1. This will be the block above the block you are standing on.'
    usage: '/dwe pos1'
    examples: []
    permissions:
      - admin
      - select
      - pos

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'pos1'
      }
    - inject s@dWE_Commands p:prerunA

    - define pos1 '<player.flag[dWEWand].as_list.get[1]||null>'
    - if <player.location.simple.is[==].to[%pos1%]> {
      - run s@msgPrefixed 'def:dWE|<&c>pos1 is already set'
      - queue clear
      }
    - define pos1 '<player.location.simple>'
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[shift|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'shift [<&ns>] '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' || '%arg1%' == 'v' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>] '
          }
    - define pos2 '<player.flag[dWEWand].as_list.get[2]||null>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - define pos 1
    - inject s@dWE_Msg p:set_Pos

dWE_Commands_Pos2:
  type: command
  debug: false
  speed: 0
  name: .pos2
  description: Set position 2
  usage: /.pos2
  aliases: ''

  data:
    description: 'Sets the location you are standing at as position 2. This will be the block above the block you are standing on.'
    usage: '/dwe pos2'
    examples: []
    permissions:
      - admin
      - select
      - pos

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'pos2'
      }
    - inject s@dWE_Commands p:prerunA

    - define pos2 '<player.flag[dWEWand].as_list.get[2]||null>'
    - if <player.location.simple.is[==].to[%pos2%]> {
      - run s@msgPrefixed 'def:dWE|<&c>pos2 is already set'
      - queue clear
      }
    - define pos1 '<player.flag[dWEWand].as_list.get[1]||null>'
    - define pos2 '<player.location.simple>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - define pos 2
    - inject s@dWE_Msg p:set_Pos

dWE_Commands_Hpos1:
  type: command
  debug: false
  speed: 0
  name: .hpos1
  description: Set position 1
  usage: /.hpos1
  aliases: ''

  data:
    description: 'Sets the location you are looking at as position 1. Has a range of 160 blocks and will not target air unless that range has been met.'
    usage: '/dwe hpos1'
    examples: []
    permissions:
      - admin
      - select
      - pos

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'hpos1'
      }
    - inject s@dWE_Commands p:prerunA

    - define pos1 '<player.flag[dWEWand].as_list.get[1]||null>'
    - if <player.location.cursor_on[160].simple.is[==].to[%pos1%]> {
      - run s@msgPrefixed 'def:dWE|<&c>pos1 is already set'
      - queue clear
      }
    - define pos1 '<player.location.cursor_on[160].simple>'
    - define pos2 '<player.flag[dWEWand].as_list.get[2]||null>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - define pos 1
    - inject s@dWE_Msg p:set_Pos

dWE_Commands_Hpos2:
  type: command
  debug: false
  speed: 0
  name: .hpos2
  description: Set position 2
  usage: /.hpos2
  aliases: ''
  allowed help:
  - determine <player.has_permission[dwe.basic]||<player.is_op>>

  data:
    description: 'Sets the location you are looking at as position 2. Has a range of 160 blocks and will not target air unless that range has been met.'
    usage: '/dwe hpos2'
    examples: []
    permissions:
      - admin
      - select
      - pos

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'hpos2'
      }
    - inject s@dWE_Commands p:prerunA

    - define pos2 '<player.flag[dWEWand].as_list.get[2]||null>'
    - if <player.location.cursor_on[160].simple.is[==].to[%pos2%]> {
      - run s@msgPrefixed 'def:dWE|<&c>pos2 is already set'
      - queue clear
      }
    - define pos1 '<player.flag[dWEWand].as_list.get[1]||null>'
    - define pos2 '<player.location.cursor_on[160].simple>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - define pos 2
    - inject s@dWE_Msg p:set_Pos

dWE_Commands_Chunk:
  type: command
  debug: false
  speed: 0
  name: .chunk
  description: Selects the chunk you are standing in
  usage: /.chunk
  aliases: ''

  data:
    description: 'Sets the chunk you are standing in as your cuboid selection.'
    usage: '/dwe chunk'
    examples: []
    permissions:
      - admin
      - chunk

  tab complete:
    - determine 'li@'

  script:
    - if !<def[command].exists> {
      - define command 'chunk'
      }
    - inject s@dWE_Commands p:prerunA

    - define pos1 '<player.location.get_chunk.cuboid.min>'
    - define pos2 '<player.location.get_chunk.cuboid.max>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - run s@msgPrefixed 'def:dWE|<&f>Chunk selected<&co> <player.location.get_chunk.replace[ch@].split[,].get[1|2].comma_separated>'

dWE_Commands_Expand:
  type: command
  debug: false
  speed: 0
  name: .expand
  description: Expands your selection
  usage: /.expand <&lt>amount/v<&gt> (n/s/e/w/u/d)
  aliases: ''

  data:
    description: 'You can expand your selection in cardinal directions, up, down, or vertically. If you do not specify a direction, the selection will be expanded in the direction you are looking.'
    usage: '/dwe expand <&lt>amount/v<&gt> (n/s/e/w/u/d)'
    examples:
      - '<&f>To expand your selection 10 blocks up'
      - '  <&e>/dwe expand 10 u'
      - ' '
      - '<&f>To expand your selection vertically'
      - '  <&e>/dwe expand v'
      - ' '
      - '<&f>To expand your selection 5 blocks in the direction you are looking'
      - '  <&e>/dwe expand 5'
    permissions:
      - admin
      - expand

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[expand|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'expand [<&ns>]/v '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' || '%arg1%' == 'v' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>]/v '
          }
      - case '2':
        - define arg2 '<def[args].get[2]||>'
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' == 'v' || '%arg1%' !matches 'number' {
          - determine 'li@'
          }
        - if 'li@n|s|e|w|u|d' contains '%arg2%' {
          - determine 'li@'
          }
          else {
          - determine 'li@n|s|e|w|u|d'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe expand <amount/v> (n/s/e/w/u/d)
    - if !<def[command].exists> {
      - define command 'expand'
      }
    - if <c.server||false> {
      - run s@msgPrefixed 'def:dWE|<&c>This command must be run as a player.'
      - queue clear
      }
    - inject s@dWE_Commands p:prerunB

    - if <def[args].get[1].escaped.is[==].to[v]||false> {
      - define pos1 '<def[pos1].sub[0,<def[pos1].y>,0].replace[l@]>'
      - define pos2 '<def[pos2].add[0,<el@val[255].sub[<def[pos2].y>]>,0].replace[l@]>'
      - define direction 'Vertically'
      - goto 'end'
      }

    - define n '<def[args].get[1].escaped.round_up||0>'
    - define d '<def[args].get[2].escaped||0>'
    - if <def[n].is[OR_LESS].than[0]||true> {
      - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe expand <&6><&lb><&7>amount/v<&6><&rb> <&6>(<&7>direction<&6>)'
      - queue clear
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - define d '<proc[getFacing].context[<player.location.pitch.as_money>|<player.location.yaw.as_money>]>'
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>Unknown direction!'
      - queue clear
      }

    - choose '%d%':
      - case 'n':
        - if <def[pos1].z.is[OR_LESS].than[<def[pos2].z>]> {
          - define pos1 '<def[pos1].sub[0,0,%n%]>'
          }
          else {
          - define pos2 '<def[pos2].sub[0,0,%n%]>'
          }
        - define direction 'North'

      - case 'e':
        - if <def[pos1].x.is[OR_MORE].than[<def[pos2].x>]> {
          - define pos1 '<def[pos1].add[%n%,0,0]>'
          }
          else {
          - define pos2 '<def[pos2].add[%n%,0,0]>'
          }
        - define direction 'East'

      - case 's':
        - if <def[pos1].z.is[OR_MORE].than[<def[pos2].z>]> {
          - define pos1 '<def[pos1].add[0,0,%n%]>'
          }
          else {
          - define pos2 '<def[pos2].add[0,0,%n%]>'
          }
        - define direction 'South'

      - case 'w':
        - if <def[pos1].x.is[OR_LESS].than[<def[pos2].x>]> {
          - define pos1 '<def[pos1].sub[%n%,0,0]>'
          }
          else {
          - define pos2 '<def[pos2].sub[%n%,0,0]>'
          }
        - define direction 'West'

      - case 'u':
        - if <def[pos1].y.is[OR_MORE].than[<def[pos2].y>]> {
          - define pos1 '<def[pos1].add[0,%n%,0]>'
          }
          else {
          - define pos2 '<def[pos2].add[0,%n%,0]>'
          }
        - define direction 'Up'

      - case 'd':
        - if <def[pos1].y.is[OR_LESS].than[<def[pos2].y>]> {
          - define pos1 '<def[pos1].sub[0,%n%,0]>'
          }
          else {
          - define pos2 '<def[pos2].sub[0,%n%,0]>'
          }
        - define direction 'Down'

      - default:
        - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>An impossible error occurred while expanding your selection!'
        - queue clear

    - mark 'end'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:expand

dWE_Commands_Contract:
  type: command
  debug: false
  speed: 0
  name: .contract
  description: Contracts your selection
  usage: /.contract
  aliases: ''

  data:
    description: 'You can contract your selection in cardinal directions, up, or down. If you do not specify a direction, the selection will be contracted in the direction you are looking.'
    usage: '/dwe contract <&lt>amount<&gt> (n/s/e/w/u/d)'
    examples:
      - '<&f>To contract your selection 10 blocks down'
      - '  <&e>/dwe contract 10 d'
      - ' '
      - '<&f>To contract your selection 1 block in the direction you are looking'
      - '  <&e>/dwe contract 1'
    permissions:
      - admin
      - contract

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[contract|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'contract [<&ns>] '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>] '
          }
      - case '2':
        - define arg2 '<def[args].get[2]||>'
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' !matches 'number' {
          - determine 'li@'
          }
        - if 'li@n|s|e|w|u|d' contains '%arg2%' {
          - determine 'li@'
          }
          else {
          - determine 'li@n|s|e|w|u|d'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe contract <amount/v> (n/s/e/w/u/d)
    - if !<def[command].exists> {
      - define command 'contract'
      }
    - inject s@dWE_Commands p:prerunB

    - define n '<def[args].get[1].escaped.round_up||0>'
    - define d '<def[args].get[2].escaped||0>'
    - if <def[n].is[OR_LESS].than[0]||true> {
      - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe contract <&6><&lb><&7>amount<&6><&rb> <&6>(<&7>direction<&6>)'
      - queue clear
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - define d '<proc[getFacing].context[<player.location.pitch.as_money>|<player.location.yaw.as_money>]>'
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>Unknown direction!'
      - queue clear
      }

    - choose '%d%':
      - case 'n':
        - if <def[pos1].z.is[OR_LESS].than[<def[pos2].z>]> {
          - define pos2 '<def[pos2].sub[0,0,%n%]>'
          }
          else {
          - define pos1 '<def[pos1].sub[0,0,%n%]>'
          }
        - define direction 'North'

      - case 'e':
        - if <def[pos1].x.is[OR_MORE].than[<def[pos2].x>]> {
          - define pos2 '<def[pos2].add[%n%,0,0]>'
          }
          else {
          - define pos1 '<def[pos1].add[%n%,0,0]>'
          }
        - define direction 'East'

      - case 's':
        - if <def[pos1].z.is[OR_MORE].than[<def[pos2].z>]> {
          - define pos2 '<def[pos2].add[0,0,%n%]>'
          }
          else {
          - define pos1 '<def[pos1].add[0,0,%n%]>'
          }
        - define direction 'South'

      - case 'w':
        - if <def[pos1].x.is[OR_LESS].than[<def[pos2].x>]> {
          - define pos2 '<def[pos2].sub[%n%,0,0]>'
          }
          else {
          - define pos1 '<def[pos1].sub[%n%,0,0]>'
          }
        - define direction 'West'

      - case 'u':
        - if <def[pos1].y.is[OR_MORE].than[<def[pos2].y>]> {
          - define pos2 '<def[pos2].add[0,%n%,0]>'
          }
          else {
          - define pos1 '<def[pos1].add[0,%n%,0]>'
          }
        - define direction 'Up'

      - case 'd':
        - if <def[pos1].y.is[OR_LESS].than[<def[pos2].y>]> {
          - define pos2 '<def[pos2].sub[0,%n%,0]>'
          }
          else {
          - define pos1 '<def[pos1].sub[0,%n%,0]>'
          }
        - define direction 'Down'

      - default:
        - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>An impossible error occurred while contracting your selection!'
        - queue clear

    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:contract

dWE_Commands_Inset:
  type: command
  debug: false
  speed: 0
  name: .inset
  description: Insets your selection
  usage: /.inset
  aliases: ''

  data:
    description: 'Inset is a form of contraction. The selection will decrease by the amount specified in all directions. It will shrink toward the center. You can also specify that it will inset only horizontally.'
    usage: '/dwe inset <&lt><&ns><&gt> -h'
    examples:
      - '<&f>To inset your selection by 3 blocks in all directions'
      - '  <&e>/dwe inset 3'
      - ' '
      - '<&f>To horizontally inset your selection by 6 blocks'
      - '  <&e>/dwe inset 6 -h'
    permissions:
      - admin
      - inset

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[inset|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'inset [<&ns>] -h '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' || '%arg1%' == '-h' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>] '
          }
      - case '2':
        - define arg1 '<def[args].get[1]||>'
        - define arg2 '<def[args].get[2]||>'
        - if '%arg1%' matches 'number' {
          - determine '-h'
          }
        - if '%arg1%' == '-h' {
          - determine '<t[<def[arg2].is[MATCHES].to[NUMBER]>]:%arg2% || <&lb><&ns><&rb>>'
          }
          else {
          - determine 'li@'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe inset <number> -h
    - if !<def[command].exists> {
      - define command 'inset'
      }
    - inject s@dWE_Commands p:prerunB

    - define n '<def[args].filter[is[matches].to[number]].get[1]||0>'
    - if <def[n].is[OR_LESS].than[0]||true> {
      - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe inset <&6><&lb><&7>amount<&6><&rb> <&6>(<&7>-h<&6>)'
      - queue clear
      }
    - define cuboid cu@%pos1%|%pos2%
    - if '<def[args].contains[-h].not||false>' {
      - define cuboid 'cu@<def[cuboid].min.add[0,%n%,0]>|<def[cuboid].max.sub[0,%n%,0]>'
      }
    - define cuboid 'cu@<def[cuboid].min.add[%n%,0,%n%]>|<def[cuboid].max.sub[%n%,0,%n%]>'
    - define pos1 '<def[cuboid].min>'
    - define pos2 '<def[cuboid].max>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:inset

dWE_Commands_Outset:
  type: command
  debug: false
  speed: 0
  name: .outset
  description: Outsets your selection
  usage: /.outset
  aliases: ''

  data:
    description: 'Outset is a form of expansion. The selection will increase by the amount specified in all directions. It will expand from the center. You can also specify that it will outset only horizontally.'
    usage: '/dwe outset <&lt><&ns><&gt> -h'
    examples:
      - '<&f>To outset your selection by 8 blocks in all directions'
      - '  <&e>/dwe outset 8'
      - ' '
      - '<&f>To horizontally outset your selection by 2 blocks'
      - '  <&e>/dwe outset 2 -h'
    permissions:
      - admin
      - outset

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[outset|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'outset [<&ns>] -h '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' || '%arg1%' == '-h' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>] '
          }
      - case '2':
        - define arg1 '<def[args].get[1]||>'
        - define arg2 '<def[args].get[2]||>'
        - if '%arg1%' matches 'number' {
          - determine '-h'
          }
        - if '%arg1%' == '-h' {
          - determine '<t[<def[arg2].is[MATCHES].to[NUMBER]>]:%arg2% || <&lb><&ns><&rb>>'
          }
          else {
          - determine 'li@'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe outset <number> -h
    - if !<def[command].exists> {
      - define command 'outset'
      }
    - inject s@dWE_Commands p:prerunB

    - define n '<def[args].filter[is[matches].to[number]].get[1]||0>'
    - if <def[n].is[OR_LESS].than[0]||true> {
      - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe outset <&6><&lb><&7>amount<&6><&rb> <&6>(<&7>-h<&6>)'
      - queue clear
      }
    - define cuboid cu@%pos1%|%pos2%
    - if '<def[args].contains[-h].not||false>' {
      - define cuboid 'cu@<def[cuboid].min.sub[0,%n%,0]>|<def[cuboid].max.add[0,%n%,0]>'
      }
    - define cuboid 'cu@<def[cuboid].min.sub[%n%,0,%n%]>|<def[cuboid].max.add[%n%,0,%n%]>'
    - define pos1 '<def[cuboid].min>'
    - define pos2 '<def[cuboid].max>'
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:outset

dWE_Commands_Shift:
  type: command
  debug: false
  speed: 0
  name: .shift
  description: Shifts your selection
  usage: /.shift
  aliases: ''

  data:
    description: 'You can shift your selection area in all cardinal directions, up, and down. Your selection will shift in the direction you are looking if no direction is specified.'
    usage: '/dwe shift <&lt>amount<&gt> (n/s/e/w/u/d)'
    examples:
      - '<&f>To shift your selection by 16 blocks to the east'
      - '  <&e>/dwe shift 16 e'
      - ' '
      - '<&f>To shift your selection by 2 blocks in the direction you are looking'
      - '  <&e>/dwe shift 2'
    permissions:
      - admin
      - shift

  math:
    n: '0,0,-<def[n]>'
    s: '0,0,<def[n]>'
    w: '-<def[n]>,0,0'
    e: '<def[n]>,0,0'
    d: '0,-<def[n]>,0'
    u: '0,<def[n]>,0'
  d:
    n: 'North'
    s: 'South'
    w: 'West'
    e: 'East'
    d: 'Down'
    u: 'Up'

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[shift|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'shift [<&ns>] '
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'number' || '%arg1%' == 'v' {
          - determine '%arg1% '
          }
          else {
          - determine '[<&ns>] '
          }
      - case '2':
        - define arg2 '<def[args].get[2]||>'
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' == 'v' || '%arg1%' !matches 'number' {
          - determine 'li@'
          }
        - if 'li@n|s|e|w|u|d' contains '%arg2%' {
          - determine 'li@'
          }
          else {
          - determine 'li@n|s|e|w|u|d'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe shift <amount> (n/s/e/w/u/d)
    - if !<def[command].exists> {
      - define command 'shift'
      }
    - inject s@dWE_Commands p:prerunB

    - define n '<def[args].get[1].escaped.round_up||0>'
    - define d '<def[args].get[2].escaped||0>'
    - if <def[n].is[OR_LESS].than[0]||true> {
      - run s@msgPrefixed 'def:dWE|<&c>SYNTAX<&co> <&e>/dwe shift <&6><&lb><&7>amount<&6><&rb> <&6>(<&7>direction<&6>)'
      - queue clear
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - define d '<proc[getFacing].context[<player.location.pitch.as_money>|<player.location.yaw.as_money>]>'
      }
    - if <el@[li@n|e|s|w|u|d].contains[%d%].not||true> {
      - run s@msgPrefixed 'def:dWE|<&4><&l>ERROR<&co> <&c>Unknown direction!'
      - queue clear
      }
    - define direction '<script.yaml_key[d.%d%]>'
    - repeat 2 {
      - define pos%value% '<def[pos%value%].add[<parse:<script.yaml_key[math.%d%]>>]>'
      }
    - flag player dWEWand:!
    - flag player dWEWand:|:%pos1%|%pos2%
    - inject s@dWE_Msg p:shift

dWE_Commands_Set:
  type: command
  debug: false
  speed: 0
  name: .Set
  description: Set your selection to a material
  usage: /.set
  aliases: ''

  data:
    description: 'Set your selection area to a specific material. You can use either the specific material name or the minecraft material name. TAB completion is available for the minecraft material names.'
    usage: '/dwe set <&lt>material<&gt>'
    examples:
      - '<&f>To set your selection to air'
      - '  <&e>/dwe set air'
      - ' '
      - '<&f>To set your selection to white stained clay using minecraft material name and data value'
      - '  <&e>/dwe set stained_clay,0'
      - ' '
      - '<&f>To set your selection to white stained clay using specific material name'
      - '  <&e>/dwe set white_clay'
    permissions:
      - admin
      - set

  tab complete:
    - if !<def[command].exists> {
      - if !<proc[dWE_HasPerm_Command].context[set|<player||server>]> {
        - determine 'li@'
        }
      - define args "<c.args>"
      - define spaces '<c.raw_args.to_list.count[ ].add[1].as_int||0>'
      }

    - choose '%spaces%':
      - case '0':
        - determine 'set <&lt>material<&gt>'
      - case '1':
        - define arg1 '<def[args].get[1]||>'
        - if '%arg1%' matches 'material' {
          - determine '%arg1%'
          }
          else {
          - define blocks '<server.list_materials.parse[as_material].filter[is_block].parse[bukkit_enum]>'
          - determine '<def[blocks].filter[starts_with[%arg1%]]||%blocks%>'
          }
      - default:
        - determine 'li@'

  script:
  # /dwe set <material>
    - if !<def[command].exists> {
      - define command 'set'
      }
    - inject s@dWE_Commands p:prerunB

    - define material <def[args].get[1]||null>
    - if %material% !matches material {
      - run s@msgPrefixed 'def:dWE|<&c>Must specify a valid material.'
      - queue clear
      }
    - define blocks <cu@%pos1%|%pos2%.blocks>
    - define undoMaterials '<def[blocks].parse[material.full]>'
    - flag player 'dWE.UndoHistory:->:set_blocks;cu@%pos1%|%pos2%;%undoMaterials%'
    - ~modifyblock %blocks% %material% delayed
#    - ~modifyblock cu@%pos1%|%pos2% '%material%' delayed
    - run s@msgPrefixed 'def:dWE|Set complete!'

dWE_Commands_Sphere:
  type: command
  debug: false
  speed: 0
  name: .sphere
  description: Creates an ellipsoid
  usage: /.sphere
  aliases: ''

  data:
    description: 'This isn<&sq>t documented because you should <&c>NOT<&f> use it!'
    usage: '/dwe sphere <&lt>x<&gt>,<&lb><&lt>y<&gt>,<&lt>z<&gt><&rb> <&lt>material<&gt>'
    examples: []
    permissions:
      - admin
      - sphere

  tab complete:
    - determine 'li@'

  script:
  # /dwe sphere <x>,[<y>,<z>] <material>
    - if !<def[command].exists> {
      - define command 'sphere'
      }
    - inject s@dWE_Commands p:prerunB

    - if <def[args].size> == 0 || ( <def[args].size> == 1 && <def[args].get[1]> !matches material ) {
      - run s@msgPrefixed 'def:dWE|<&c>/dwe sphere <&lt>x<&gt>,[<&lt>y<&gt>,<&lt>z<&gt>] <&lt>material<&gt>'
      - queue clear
      }

    - define cuboid 'cu@%pos1%|%pos2%'
    - define center '<def[cuboid].center.simple>'
    - if <def[args].size> == 1 {
    # Only specify material. Sizes are determined by wand selection.
      - define material '<def[args].get[1]>'
      - define cSize '<def[cuboid].size.add[1,1,1].div[2].simple.split_by[,]>'
      - define rads "<def[cSize].get[1]>,<def[cSize].get[2]>,<def[cSize].get[3]>"
      - narrate "%rads%"
      }
      else {
      - define rads '<def[args].get[1].split_by[,]>'
      - if <def[rads].size> == 2 || <def[rads].filter[is[matches].to[number]].is[!=].to[%rads%]> {
        - run s@msgPrefixed 'def:dWE|<&c>/dwe sphere <&lt>x<&gt>,[<&lt>y<&gt>,<&lt>z<&gt>] <&lt>material<&gt>'
        - queue clear
        }
      - define x '<def[rads].get[1].abs>'
      - define y '<def[rads].get[2].abs||%x%>'
      - define z '<def[rads].get[3].abs||%x%>'
      - define rads "%x%,%y%,%z%"
      - define material '<def[args].get[2]>'
      }

    - define ellipsoid 'ellipsoid@%center%,%rads%'
    - define blocks '<def[ellipsoid].blocks>'
    - define undoMaterials '<def[blocks].parse[material.full]>'
    - flag player 'dWE.UndoHistory:->:set_blocks;<def[ellipsoid]>;%undoMaterials%'
    - ~modifyblock %blocks% %material% delayed
#    - ~modifyblock %ellipsoid% %material% delayed
    - run s@msgPrefixed 'def:dWE|Set complete!'

dWE_Commands_Copy:
  type: command
  debug: false
  speed: 0
  name: .copy
  description: Copy your selection
  usage: /.copy
  aliases: ''

  data:
    description: 'This isn<&sq>t documented because you should <&c>NOT<&f> use it!'
    usage: '/dwe copy'
    examples: []
    permissions:
      - admin
      - copy

  tab complete:
    - determine 'li@'

  script:
  # /dwe copy
    - if !<def[command].exists> {
      - define command 'copy'
      }
    - inject s@dWE_Commands p:prerunB

    - define blocks '<cu@%pos1%|%pos2%.blocks>'
    - flag player dWE.Clipboard:!
    - flag player 'dWE.Clipboard:|:<def[blocks].parse[material]>'
    - run s@msgPrefixed 'def:dWE|<&7><&o>Selection saved to clipboard'

dWE_Commands_Paste:
  type: command
  debug: false
  speed: 0
  name: .paste
  description: Paste your selection
  usage: /.paste
  aliases: ''

  data:
    description: 'This isn<&sq>t documented because you should <&c>NOT<&f> use it!'
    usage: '/dwe paste'
    examples: []
    permissions:
      - admin
      - paste

  tab complete:
    - determine 'li@'

  script:
  # /dwe paste <number> -h
    - if !<def[command].exists> {
      - define command 'paste'
      }
    - inject s@dWE_Commands p:prerunB
    - run s@msgPrefixed 'def:dWE|<&c>This command doesn<&sq>t do anything yet!'

dWE_Commands_Rotate:
  type: command
  debug: false
  speed: 0
  name: .rotate
  description: Rotate your selection
  usage: /.rotate
  aliases: ''

  data:
    description: 'This isn<&sq>t documented because you should <&c>NOT<&f> use it!'
    usage: '/dwe rotate'
    examples: []
    permissions:
      - admin
      - rotate

  tab complete:
    - determine 'li@'

  script:
  # /dwe rotate [90/180/270/360]
    - if !<def[command].exists> {
      - define command 'rotate'
      }
    - inject s@dWE_Commands p:prerunB
    - run s@msgPrefixed 'def:dWE|<&c>This command doesn<&sq>t do anything yet!'

dWE_Commands_Undo:
  type: command
  debug: false
  speed: 0
  name: .undo
  description: Undo edits
  usage: /.undo
  aliases: ''

  data:
    description: 'This isn<&sq>t documented because you should <&c>NOT<&f> use it!'
    usage: '/dwe undo'
    examples: []
    permissions:
      - admin
      - undo

  tab complete:
    - determine 'li@'

  script:
  # /dwe undo
    - if !<def[command].exists> {
      - define command 'undo'
      }
    - inject s@dWE_Commands p:prerunA

    - define last_action '<player.flag[dWE.UndoHistory].as_list.last||null>'
    - if <def[last_action]> == 'null' {
      - run s@msgPrefixed 'def:dWE|<&6>Nothing to undo!'
      - queue clear
      }
    - choose '<def[last_action].split[;].get[1]>':
      - case 'set_blocks':
        - define selection '<def[last_action].split[;].get[2]||null>'
        - define materials '<def[last_action].split[;].get[3]||li@>'
        - ~modifyblock %selection% %materials% delayed
        - run s@msgPrefixed 'def:dWE|<&a>Undo complete!'
      - 'default':
        - run s@msgPrefixed 'def:dWE|<&4>ERROR <&c><def[last_action].split[;].get[1]> is an unknown type!'
        - queue clear
    - flag player 'dWE.UndoHistory:<-:%last_action%'
#
#  END dWE Command Scripts
#--------------------------------------
#
################################################################################
#
#  dWorldEditor Other Utilities
#
# Other Utility functions used throughout dWorldEditor
#
#--------------------------------------
#
#  Command Permission Check Procedure script
#  - Used to check if a player has permission to use a command.
#
dWE_HasPerm_Command:
# Usage: <proc[dWE_HasPerm_Command].context[command|player]>
  type: procedure
  speed: 0
  debug: false
  definitions: command|player

  script:
    - if %player% == 'server' || <def[player].is_op> || <def[player].permission[dwe.admin]||false> {
      - determine true
      }
    - define perms "<s@dWE_Commands_%command%.yaml_key[data.permissions]||li@>"
    - if <def[perms].is_empty> {
      - determine true
      }
    - foreach %perms% {
      - define perm '<parse:%value%>'
      - if <def[player].permission[dwe.%perm%]> {
        - determine true
        }
      }
    - determine false
#
#--------------------------------------
#
#  getFacing Procedure script
#  - Returns the cardinal direction the player is facing
#
getFacing:
# Usage: <proc[getFacing].context[%pitch%|%yaw%]>
  type: procedure
  debug: false
  definitions: pitch|yaw
  script:
    - if <def[pitch].is[OR_MORE].than[45]||false> determine d
      else if <def[pitch].is[OR_LESS].than[-45]||false> determine u
      else if <def[yaw].is[OR_MORE].than[337.5]||false> || <def[yaw].is[LESS].than[22.5]||false> determine s
      else if <def[yaw].is[OR_MORE].than[292.5]||false> determine se
      else if <def[yaw].is[OR_MORE].than[247.5]||false> determine e
      else if <def[yaw].is[OR_MORE].than[202.5]||false> determine ne
      else if <def[yaw].is[OR_MORE].than[157.5]||false> determine n
      else if <def[yaw].is[OR_MORE].than[112.5]||false> determine nw
      else if <def[yaw].is[OR_MORE].than[67.5]||false> determine w
      else if <def[yaw].is[OR_MORE].than[22.5]||false> determine sw
      else determine 0
#
#--------------------------------------
#
#  selectionSize Procedure script
#  - Returns the size of the players selection
#
selectionSize:
# Usage: <proc[selectionSize].context[%pos1%|%pos2%]>
  type: procedure
  debug: false
  definitions: pos1|pos2
  script:
    - define x '<def[pos1].as_location.x.sub[<def[pos2].as_location.x||0>].abs.add[1]||1>'
    - define y '<def[pos1].as_location.y.sub[<def[pos2].as_location.y||0>].abs.add[1]||1>'
    - define z '<def[pos1].as_location.z.sub[<def[pos2].as_location.z||0>].abs.add[1]||1>'
    - determine '<def[x].mul[%y%].mul[%z%].as_int||0>'
#
#  END dWE Other Utilities
#--------------------------------------
#
#  dWorldEditor Author Banner Items
#
# Banner items representing the authors
#
dwe_Author_mcmonkey:
  type: item
  debug: false
  material: creeper_skull
  display name: <&2><&l>MCMONKEY
  text_name: 'MCMONKEY'
  url: 'http://mcmonkey.org'
  lore:
  - <&a>Click to visit http://mcmonkey.org

dwe_Author_Morphan1:
  type: item
  debug: false
  material: creeper_skull
  display name: <&2><&l>Morphan1
  text_name: 'Morphan1'
  url: 'http://en.wikipedia.org/wiki/Candy'
  lore:
  - <&a>pls2buymesome

dwe_Author_Anthony:
  type: item
  debug: false
  material: i@human_skull
  display name: "<&f>             <&pipe>Anthony<&pipe>"
  text_name: '|Anthony|'
  url: 'http://mineconomy.org'
  lore:
  - <&7>  Owner<&co> <&e>M<&6>ine<&e>C<&6>onomy <&e>N<&6>etwork
  - <&5>-------------------------
  - <&7>
  - <&7>  I<&sq>ve been playing minecraft
  - <&7> and running a server since
  - <&7> 2010. I have fun and share
  - <&7> what I do.
  - <&7>
  - <&9>           Click To Visit
#
#  END dWE Author Banner Items
#--------------------------------------
