
dRestaurantMenu:
  type: world
  debug: false
  events:
#  dRestaurant Menu events
#
    on player closes inventory:
      - if <c.inventory.replace[in@].split[_].get[1].is[!=].to[dRestaurant]||true> queue clear
      - note remove 'as:<context.inventory.notable_name>'

    on player right clicks with i@dRestaurant_Menu:
      - if <player.has_flag[dRestaurant_Order]||false> {
        - define restaurant <player.flag[dRestaurant_Order].split[/].get[1]||null>
        - define inRestaurant <player.location.cuboids.filter[notable_name.is[==].to[restaurant_%restaurant%]]||li@>
        - if !<def[inRestaurant].is_empty> {
          - define orderPlaced '<player.flag[dRestaurant_Order].split[/].get[3]||false>'
          - if %orderPlaced% queue clear
          - run locally display_Menu instantly
          - queue clear
          }
        }
      - flag player dRestaurant_Order:!
      - run s@dRestaurantMenu p:takeMenu instantly
      - narrate format:TBFormat "I don<&sq>t think I should have this... and even if I am supposed to have it, I have no idea what I<&sq>m doing right now!"
      - queue clear

    on player clicks in inventory:
      - if <c.inventory.replace[in@].split[_].get[1].is[!=].to[dRestaurant]||true> queue clear
      - determine passively cancelled
#      - inject locally 'p:narrateClickContext'
      - inject locally 'p:inventoryClick_<c.inventory.replace[in@].split[_].get[2]>'

  narrateClickContext:
  # Throw in for debugging when needed
    - if <player.has_flag[dRestaurant_debug]> {
      - narrate "context.item.scriptname <context.item.scriptname>"
      - narrate "context.item <context.item>"
      - narrate "context.inventory <context.inventory>"
      - narrate "context.cursor_item <context.cursor_item>"
      - narrate "context.click <context.click>"
      - narrate "context.slot_type <context.slot_type>"
      - narrate "context.slot <context.slot>"
      - narrate "context.raw_slot <context.raw_slot>"
      - narrate "context.is_shift_click <context.is_shift_click>"
      - narrate "context.action <context.action>"
      }

  takeMenu:
#    - narrate "Attempting to remove the <player.item_in_hand> from player hand..."
#    - inventory remove 'd:<player.inventory>' 'o:<player.item_in_hand>'
#    - inventory update 'd:<player.inventory>'
#    - narrate "Attempting to remove the %1% known in the click event..."
#    - inventory remove 'd:<player.inventory>' 'o:%1%'
#    - inventory update 'd:<player.inventory>'
#    - narrate "Attempting to take i@dRestaurant_Menu from player..."
#    - take i@dRestaurant_Menu
#    - narrate "Attempting to take <player.inventory.slot[<player.inventory.find[drestaurant_menu]>].full> from player..."
#    - take '<player.inventory.slot[<player.inventory.find[drestaurant_menu]>].full>'
    - inventory set 'd:<player.inventory>' 'o:i@dRestaurant_Menu' 'slot:<player.inventory.find_imperfect[drestaurant_menu]>'
    - take i@dRestaurant_Menu

#
#
#--------------------------------------
#
#  Inventory Click Handlers
#
  inventoryClick_Menu:
    - if <c.raw_slot.is[MORE].than[36]> queue clear
    - define orderObj '<player.flag[dRestaurant_Order]>'
    - define restaurant '<def[orderObj].split[/].get[1]||null>'
    - define order '<def[orderObj].split[/].get[2].as_list||li@>'
    - define hasOrdered '<def[orderObj].split[/].get[3]||false>'
    - if <c.item.scriptname.split[_].get[2].is[==].to[food]||false> {
      - if <def[order].size.is[OR_MORE].than[9]> {
        - run s@dRestaurantMsg 'def:<&c>You may only order 9 items at one time.' instantly
        - run s@dRestaurantMsg 'def:<&c>Click the <&f>Review Order<&c> button to continue.' instantly
        - queue clear
        }
      - run s@dRestaurantMsg 'def:<&f><c.item.display> <&3>added to your order.' instantly
      - define price '<server.flag[dRestaurant.%restaurant%.Menu].as_list.map_get[<c.item.scriptname>]||<c.item.scriptname.as_script.yaml_key[price]>>'
      - flag player dRestaurant_Order:%restaurant%/<def[order].include[<c.item.simple>,%price%]>
      }
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - define GUI 'dRestaurant_Menu_<player.name>'
      - inject <context.item.scriptname.as_script>
      }

  inventoryClick_OrderReview:
    - if <c.raw_slot.is[MORE].than[36]> queue clear
    - define orderObj '<player.flag[dRestaurant_Order]>'
    - define restaurant '<def[orderObj].split[/].get[1]||null>'
    - define order '<def[orderObj].split[/].get[2].as_list||li@>'
    - define hasOrdered '<def[orderObj].split[/].get[3]||false>'
    - define GUI 'dRestaurant_OrderReview_<player.name>'
    - if <c.item.scriptname.split[_].get[2].is[==].to[food]||false> {
      - run s@dRestaurantMsg 'def:<&f><c.item.display> <&3>removed from your order.' instantly
      - inventory set 'd:in@%GUI%' 'o:<c.item.simple>' 'slot:<el@val[in@%GUI%].as_inventory.find[<c.item.scriptname>]>'
      - inventory remove 'd:in@%GUI%' 'o:<c.item.simple>'
      - inventory update 'd:in@%GUI%'
      - flag player dRestaurant_Order:%restaurant%/<def[order].remove[<def[order].find_partial[<c.item.simple>]>]||%order%>
      - define priceList '<player.flag[dRestaurant_Order].split[/].get[2].as_list.get_sub_items[2].split_by[,]||li@>'
      - foreach %priceList% {
        - define totalPrice '<def[totalPrice].add[%value%]||%value%>'
        }
#      - inject s@dRestaurantMenu p:display_OrderReview
      - inventory set 'd:in@%GUI%' 'o:i@dRestaurant_Button_OrderAccept[lore=<&f>Total<&co> <&6>$<&a><def[totalPrice]||0>|<&f>|<&b>Click to accept]' 'slot:36'
      - queue clear
      }
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - inject <context.item.scriptname.as_script>
      }

  inventoryClick_MenuEdit:
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]>'
    - define menuList '<server.flag[dRestaurant.%restaurant%.Menu].as_list||li@>'
    - define GUI 'dRestaurant_MenuEdit_<player.name>'
    - if <c.raw_slot.is[OR_LESS].than[0]> {
#      - narrate "<&b>dRestaurant<&co> <&c> This is not a dRestaurant Food item!"
      - queue clear
      }

    # Adding an item to the menu
    - if <c.raw_slot.is[MORE].than[36]> {
      - if <c.item.scriptname.split[_].get[2].is[!=].to[food]||true> {
        - run s@dRestaurantMsg 'def:<&c>This is not a dRestaurant Food item!'
        - queue clear
        }
      - if <def[menuList].size.is[OR_MORE].than[27]> {
        - run s@dRestaurantMsg 'def:<&c>You may only have 27 items in your menu!' instantly
        - queue clear
        }
      - if <def[menuList].get_sub_items[1].contains[<c.item.scriptname>]> {
        - run s@dRestaurantMsg 'def:<&c>This item is already on your menu!' instantly
        - queue clear
        }
      - run s@dRestaurantMsg 'def:<&a>Added <&f><c.item.display> <&a>to the menu.' instantly
      - inventory remove 'd:<player.inventory>' 'o:<c.item>'
      - inventory update 'd:<player.inventory>'
      - define hr '<&5>--------------------'
      - define msg0 '<&e>       <&n>Click Actions'
      - define msg1 '<&3> Reset  <&f><&co> <&7><&o>Double<&7> Left'
      - define msg2 '<&4> Remove<&f><&co> <&7>Middle'
      - define msg3 '<&c> - <&6>$<&c>0.50<&f><&co> <&7>Left'
      - define msg4 '<&c> - <&6>$<&c>1.00<&f><&co> <&7><&o>Shift<&7> Left'
      - define msg5 '<&a> + <&6>$<&a>0.50<&f><&co> <&7>Right<&7>'
      - define msg6 '<&a> + <&6>$<&a>1.00<&f><&co> <&7><&o>Shift<&7> Right'
      - define price '<c.item.scriptname.as_script.yaml_key[price]||0>'
      - define ingredients '<&7> - <c.item.scriptname.as_script.yaml_key[ingredients].replace[li@].replace[|].with[|<&7> - ]>'
      - define lore '<&b><&f>Price<&co> <&6>$<&a><def[price]||0>|<&f>Ingredients<&co>|<def[ingredients]||<&7> - none>|%hr%|%msg0%|<&f>|%msg1%|%msg2%|%msg3%|%msg4%|%msg5%|%msg6%'
      - inventory add 'd:in@%GUI%' 'o:<c.item>[lore=%lore%]'
      - flag server dRestaurant.%restaurant%.Menu:->:<c.item.scriptname>/%price%
      - queue clear
      }

    # Editing an existing item
    - if <c.raw_slot.is[OR_LESS].than[27]> {
      - if <c.item.scriptname.split[_].get[2].is[!=].to[food]||true> {
        - run s@dRestaurantMsg 'def:<&c>This is not a dRestaurant Food item!' instantly
        - inventory set 'd:in@%GUI%' 'o:<c.item.simple>' 'slot:<el@val[in@%GUI%].as_inventory.find[<c.item>]>'
        - inventory remove 'd:in@%GUI%' 'o:<c.item.simple>'
        - inventory update 'd:in@%GUI%'
        - queue clear
        }

      # Middle click removes
      - if <context.click.is[==].to[MIDDLE]> {
        - run s@dRestaurantMsg 'def:<&c>Removed <&f><c.item.display> <&c>from the menu.' instantly
        - inventory set 'd:in@%GUI%' 'o:<c.item.simple>' 'slot:<el@val[in@%GUI%].as_inventory.find[<c.item.scriptname>]>'
        - inventory remove 'd:in@%GUI%' 'o:<c.item.simple>'
        - inventory update 'd:in@%GUI%'
        - inventory add 'd:<player.inventory>' 'o:<c.item.simple>'
        - inventory update 'd:<player.inventory>'
        - flag server dRestaurant.%restaurant%.Menu:<-:<c.item.scriptname>/<def[menuList].map_get[<c.item.scriptname>]>
        - queue clear
        }

      # Left click decreases price by $0.50
      # A double left click causes an error and the fallback kicks in. It's the
      # only click type that seems to do this.
      - define price '<c.item.scriptname.as_script.yaml_key[price]||0.00>'
      - if <context.click.is[==].to[LEFT]> {
        - define price '<def[menuList].map_get[<c.item.scriptname>].sub[0.5].as_money||%price%>'
        }
      # Shift Left click decreases price by $1
        else if <context.click.is[==].to[SHIFT_LEFT]> {
        - define price '<def[menuList].map_get[<c.item.scriptname>].sub[1].as_money||%price%>'
        }
      # Right click increases price by $0.50
        else if <context.click.is[==].to[RIGHT]> {
        - define price '<def[menuList].map_get[<c.item.scriptname>].add[0.5].as_money||%price%>'
        }
      # Shift Right click increases price by $1
        else if <context.click.is[==].to[SHIFT_RIGHT]> {
        - define price '<def[menuList].map_get[<c.item.scriptname>].add[1].as_money||%price%>'
        }
      - if <def[price].is[LESS].than[0]> {
        - run s@dRestaurantMsg 'def:<&c>That price is too low fool!' instantly
        - queue clear
        }
      # Adjust the inventory item
      - define hr '<&5>--------------------'
      - define msg0 '<&e>       <&n>Click Actions'
      - define msg1 '<&3> Reset  <&f><&co> <&7><&o>Double<&7> Left'
      - define msg2 '<&4> Remove<&f><&co> <&7>Middle'
      - define msg3 '<&c> - <&6>$<&c>0.50<&f><&co> <&7>Left'
      - define msg4 '<&c> - <&6>$<&c>1.00<&f><&co> <&7><&o>Shift<&7> Left'
      - define msg5 '<&a> + <&6>$<&a>0.50<&f><&co> <&7>Right<&7>'
      - define msg6 '<&a> + <&6>$<&a>1.00<&f><&co> <&7><&o>Shift<&7> Right'
      - define ingredients '<&7> - <c.item.scriptname.as_script.yaml_key[ingredients].replace[li@].replace[|].with[|<&7> - ]>'
      - define lore '<&b><&f>Price<&co> <&6>$<&a><def[price]||0>|<&f>Ingredients<&co>|<def[ingredients]||<&7> - none>|%hr%|%msg0%|<&f>|%msg1%|%msg2%|%msg3%|%msg4%|%msg5%|%msg6%'
      - inventory set 'd:in@%GUI%' 'o:<c.item>[lore=%lore%]' 'slot:<el@val[in@%GUI%].as_inventory.find[<c.item.scriptname>]>'
      - flag server dRestaurant.%restaurant%.Menu:<-:<c.item.scriptname>/<def[menuList].map_get[<c.item.scriptname>]>
      - flag server dRestaurant.%restaurant%.Menu:->:<c.item.scriptname>/%price%
      - queue clear
      }

    # Clicks on a dRestaurant Button can only happen in slots 28 - 36
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - define GUI 'dRestaurant_Menu_<player.name>'
      - inject <context.item.scriptname.as_script>
      }

  inventoryClick_ManageStaff:
    - if <c.raw_slot.is[MORE].than[36]> queue clear
    - define type '<c.item.simple.split[_].get[4]||false>'
    - if <def[type].is[!=].to[false]||false> define npc <c.item.display.as_npc||null>
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - define GUI 'dRestaurant_ManageStaff_<player.name>'
      - inject <context.item.scriptname.as_script>
      }

  inventoryClick_ManageInventory:
    - if <c.raw_slot.is[MORE].than[36]> queue clear
    - if <c.item.scriptname.split[_].get[1].is[!=].to[dRestaurant]||true> queue clear
    - if <c.item.scriptname.split[_].get[2].is[==].to[food]||false> {
      - - run s@dRestaurantMsg 'def:FOOD!' instantly
      }
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - define GUI 'dRestaurant_ManageInventory_<player.name>'
      - inject <context.item.scriptname.as_script>
      }

  inventoryClick_EquipmentChecks:
    - if <c.raw_slot.is[OR_LESS].than[0]> queue clear
    - if <c.raw_slot.is[MORE].than[36]> queue clear
    - if <c.item.scriptname.split[_].get[1].is[!=].to[dRestaurant]||true> queue clear
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]>'
    - define GUI 'dRestaurant_EquipmentChecks_<player.name>'
    - if <c.item.scriptname.split[_].get[2].is[==].to[equipment]||false> {
      - define hr '<&5>--------------------'
      - define msg0 '<&e>       <&n>Click Actions'
      - define msg3 '<&b> Count All <&f><&co> <&7>Left'
      - define msg5 '<&b> Visit All <&f><&co> <&7>Right<&7>'
      - define equipment '<c.item.scriptname.split[_].get[3]>'
      - inject <context.item.scriptname.as_script>
      - if <context.click.is[==].to[LEFT]> {
        - if <def[locations].is_empty||true> {
          - define msg '<&c>No %equipment% found'
          }
          else {
          - define msg '<&a>Found <&f><def[locations].size> <&a>%equipment%'
          }
        - define lore '%msg%|%hr%|%msg0%|<&f>|%msg3%|%msg5%'
        - inventory set 'd:in@%GUI%' 'o:<c.item>[lore=%lore%]' 'slot:<el@val[in@%GUI%].as_inventory.find[<c.item.scriptname>]>'
        - inventory update 'd:in@%GUI%'
        - queue stop
        }
        else if <context.click.is[==].to[RIGHT]> {
        - inventory close
        - if <def[locations].is_empty||true> {
          - narrate "<&b>dRestaurant<&co> <&c>There are no %equipment% in %restaurant%!"
          }
          else {
          - teleport <player> <def[locations].random.split[/].get[2]||<player.location>>
          }
        }
      - queue clear
      }
    - if <c.item.scriptname.split[_].get[2].is[==].to[button]||false> {
      - inject <context.item.scriptname.as_script>
      - queue clear
      }
#
#
#--------------------------------------
#
#  Inventory Display Generators
#
  display_Menu:
    - define GUI 'dRestaurant_Menu_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1><def[restaurant].substring[1,11]> Menu;size=36]' 'as:%GUI%'
    - define hr '<&5>--------------------'
    - foreach <server.flag[dRestaurant.%restaurant%.Menu].as_list||li@> {
      - define food '<def[value].split[/].get[1].as_item>'
      - define price '<def[value].split[/].get[2]||<def[food].scriptname.as_script.yaml_key[price]||0>>'
      - define name '<def[food].display>'
      - define foodLevel '<def[food].scriptname.as_script.yaml_key[foodLevel]>'
      - define saturation '<def[food].scriptname.as_script.yaml_key[saturation]>'
      - define health '<def[food].scriptname.as_script.yaml_key[health]>'
      - define effects '<&7> - <def[food].scriptname.as_script.yaml_key[effects].replace[li@].replace[|].with[| - ]>'
      - define lore '<&b><&f>Price<&co> <&6>$<&a>%price%|%hr%|<&f>|<&f>Food Points<&co> <&7>%foodLevel%|<&f>Saturation<&co> <&7>%saturation%|<&f>Health Points<&co> <&7>%health%|<&f>Effects<&co>|%effects%'
      - inventory add 'd:in@%GUI%' 'o:<def[food]>[lore=%lore%]' 'slot:%loop_index%'
      }
    - if <server.flag[dRestaurant.%restaurant%.Owner].is[==].to[<player>]||false>
      || <player.has_permission[dRestaurant.admin]> {
      - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_MenuEdit' 'slot:28'
      - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_ManageStaff' 'slot:29'
      - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_ManageInventory' 'slot:30'
      - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_EquipmentChecks' 'slot:31'
      }
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_OrderCancel' 'slot:35'
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_OrderReview' 'slot:36'
    - inventory open 'd:in@%GUI%'


  display_OrderReview:
    - define GUI 'dRestaurant_OrderReview_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Order Review;size=36]' 'as:%GUI%'
    - define hr '<&5>--------------------'
    - define msg '<&c>      Click to Remove'
    - foreach <player.flag[dRestaurant_Order].split[/].get[2].as_list||li@> {
      - define food '<def[value].split[,].get[1].as_item>'
      - define price '<def[value].split[,].get[2]||<def[food].scriptname.as_script.yaml_key[price]||0>>'
      - define totalPrice '<def[totalPrice].add[%price%]||%price%>'
      - define name '<def[food].display>'
      - define foodLevel '<def[food].scriptname.as_script.yaml_key[foodLevel]>'
      - define saturation '<def[food].scriptname.as_script.yaml_key[saturation]>'
      - define health '<def[food].scriptname.as_script.yaml_key[health]>'
      - define effects '<&7> - <def[food].scriptname.as_script.yaml_key[effects].replace[li@].replace[|].with[|<&7> - ]>'
      - define lore '<&b><&f>Price<&co> <&6>$<&a>%price%|%hr%|%msg%|<&f>Food Points<&co> <&7>%foodLevel%|<&f>Saturation<&co> <&7>%saturation%|<&f>Health Points<&co> <&7>%health%|<&f>Effects<&co>|%effects%'
      - inventory add 'd:in@%GUI%' 'o:<def[food]>[lore=%lore%]' 'slot:%loop_index%'
      }
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_Menu' 'slot:34'
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_OrderCancel' 'slot:35'
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_OrderAccept[lore=<&f>Total<&co> <&6>$<&a><def[totalPrice]||0>|<&f>|<&b>Click to accept]' 'slot:36'
    - inventory open 'd:in@%GUI%'


  display_MenuEdit:
    - define GUI 'dRestaurant_MenuEdit_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Admin Menu Edit;size=36]' 'as:%GUI%'
    - define hr '<&5>--------------------'
    - define msg0 '<&e>       <&n>Click Actions'
    - define msg1 '<&3> Reset  <&f><&co> <&7><&o>Double<&7> Left'
    - define msg2 '<&4> Remove<&f><&co> <&7>Middle'
    - define msg3 '<&c> - <&6>$<&c>0.50<&f><&co> <&7>Left'
    - define msg4 '<&c> - <&6>$<&c>1.00<&f><&co> <&7><&o>Shift<&7> Left'
    - define msg5 '<&a> + <&6>$<&a>0.50<&f><&co> <&7>Right<&7>'
    - define msg6 '<&a> + <&6>$<&a>1.00<&f><&co> <&7><&o>Shift<&7> Right'
    - foreach <server.flag[dRestaurant.%restaurant%.Menu].as_list||li@> {
      - define food '<def[value].split[/].get[1].as_item>'
      - define price '<def[value].split[/].get[2]||<def[food].scriptname.as_script.yaml_key[price]||0>>'
      - define ingredients '<&7> - <def[food].scriptname.as_script.yaml_key[ingredients].replace[li@].replace[|].with[|<&7> - ]>'
      - define lore '<&b><&f>Price<&co> <&6>$<&a><def[price]||unknown>|<&f>Ingredients<&co>|<def[ingredients]||<&7> - none>|%hr%|%msg0%|<&f>|%msg1%|%msg2%|%msg3%|%msg4%|%msg5%|%msg6%'
      - inventory add 'd:in@%GUI%' 'o:<def[food]>[lore=%lore%]' 'slot:%loop_index%'
      }
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_Menu' 'slot:36'
    - inventory open 'd:in@%GUI%'


  display_ManageStaff:
    - define GUI 'dRestaurant_ManageStaff_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Staff Management;size=36]' 'as:%GUI%'
    - define hr '<&5>-------------------------'
    - define msg0 '<&e>           <&n>Click to Edit'
    - foreach li@Waitress|Chef {
      - define type %value%
      - foreach <server.flag[dRestaurant.%restaurant%.Staff.%type%].as_list||li@> {
        - define npc '%value%'
        - define name '<&b><def[npc].name>'
        - define skin '<def[npc].skin>'
        - define stats '<def[npc].flag[dRestaurant_FidgetValues].as_list>'
        - define salary ''
        - define idleWait '<def[stats].get[2]>s'
        - define radius '<def[stats].get[3]>'
        - define speed '<def[stats].get[4]>'
        - define spawnLoc '<def[stats].get[5].simple>'
        - define height '<def[stats].get[6]>'
        - define mats '<&b>   ⁘ <&7><def[stats].get[7].split[/].replace[li@].replace[|].with[|<&b>   ⁘ <&7>]>'
        - define lore '<&f>Salary<&co> %salary%|%hr%|%msg0%|<&f>|<&f>Skin<&co> <&7>%skin%|<&f>Spawn<&co> <&7>%spawnLoc%|<&f>Idle Wait<&co> <&7>%idleWait%|<&f>Pathfinding|<&b> ⁛ <&f><&o>Speed<&co> <&7>%speed%|<&b> ⁛ <&f><&o>Radius<&co> <&7>%radius%|<&b> ⁛ <&f><&o>Height<&co> <&7>%height%|<&b> ⁛ <&f><&o>Materials|%mats%'
        - define slot '<tern[<def[type].is[==].to[Waitress]>]:%loop_index%||<def[loop_index].add[9].as_int>>'
        - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_ManageStaff_Edit%type%[display_name=%name%;skull_skin=%skin%;lore=%lore%]' 'slot:%slot%'
        }
      }
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_ManageStaff_HireWaitress' 'slot:28'
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_ManageStaff_HireChef[skull_skin=chef712]' 'slot:29'
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_Menu' 'slot:36'
    - inventory open 'd:in@%GUI%'


  display_ManageStaff_EditWaitress:
    - define GUI 'dRestaurant_ManageStaff_EditWaitress_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Edit Waitress;size=36]' 'as:%GUI%'


  display_ManageStaff_EditChef:
    - define GUI 'dRestaurant_ManageStaff_EditChef_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Edit Chef;size=36]' 'as:%GUI%'


  display_ManageInventory:
    - define GUI 'dRestaurant_ManageInventory_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Staff Management;size=36]' 'as:%GUI%'


  display_EquipmentChecks:
    - define GUI 'dRestaurant_EquipmentChecks_<player.name>'
    - define restaurant '<player.flag[dRestaurant_Order].split[/].get[1]||null>'
    - note 'in@generic[title=<&1>Equipment Checks;size=36]' 'as:%GUI%'
    - define hr '<&5>--------------------'
    - define msg0 '<&e>       <&n>Click Actions'
#    - define msg1 '<&3>  <&f><&co> <&7><&o>Double<&7> Left'
#    - define msg2 '<&4>  <&f><&co> <&7>Middle'
    - define msg3 '<&b> Count All <&f><&co> <&7>Left'
#    - define msg4 '<&c>  <&f><&co> <&7><&o>Shift<&7> Left'
    - define msg5 '<&b> Visit All <&f><&co> <&7>Right<&7>'
#    - define msg6 '<&a>  <&f><&co> <&7><&o>Shift<&7> Right'
    - define lore '<&f>|%hr%|%msg0%|<&f>|%msg3%|%msg5%'
    - define buttons '<server.list_scripts.filter[name.contains[drestaurant_equipment]].parse[name.as_item]>'
    - foreach %buttons% {
      - inventory add 'd:in@%GUI%' 'o:%value%[lore=%lore%]' 'slot:%loop_index%'
      }
    - inventory add 'd:in@%GUI%' 'o:i@dRestaurant_Button_Menu' 'slot:36'
    - inventory open 'd:in@%GUI%'





################################################################################
#
#  dRestaurant Custom Items
#
# dRestaurant uses a lot of custom items to do different things.
#
#
#--------------------------------------
#
#  Menu Item
#
dRestaurant_Menu:
  type: item
  material: i@book
  display name: menu
  lore:
    - "<&b>Hold in your hand and"
    - "<&b>Right Click to open"
#
#
#--------------------------------------
#
#  Menu Buttons
#
dRestaurant_Button_Menu:
  type: item
  material: i@book_and_quill
  display name: <&f>Back to Menu
#  lore:
#    - "<&b>Click to view the menu"
#    - ""
  script:
    - note remove 'as:<def[GUI]>'
    - inject s@dRestaurantMenu p:display_Menu

dRestaurant_Button_OrderCancel:
  type: item
  material: i@tnt
  display name: <&f>Cancel Order
#  lore:
#    - "<&b>Click to cancel your order"
#    - ""
  script:
    - inventory close
    - flag player dRestaurant_Order:!
    - note remove 'as:<def[GUI]>'
    - run s@dRestaurantMenu p:takeMenu
    - run s@dRestaurantMsg 'def:<&c>Order Canceled!' instantly
    - wait 1t

dRestaurant_Button_OrderReview:
  type: item
  material: i@book
  display name: <&f>Review Order
#  lore:
#    - "<&b>Click to review your order"
#    - ""
  script:
    - note remove 'as:<def[GUI]>'
    - inject s@dRestaurantMenu p:display_OrderReview

dRestaurant_Button_OrderAccept:
  type: item
  material: i@nether_star
  display name: <&f>Accept Order
#  lore:
#    - "<&b>Click to accept your order"
#    - ""
  script:
    - if <def[order].is_empty> {
      - run s@dRestaurantMsg 'def:<&c>Your order is empty!' instantly
      - queue clear
      }
    - foreach <def[order]||li@> {
      - define food '<def[value].split[,].get[1].as_item>'
      - define price '<def[value].split[,].get[2]||<def[food].scriptname.as_script.yaml_key[price]||0>>'
      - define totalPrice '<def[totalPrice].add[%price%]||%price%>'
      }
    - if <player.money.is[LESS].than[%totalPrice%]||false> {
      - run s@dRestaurantMsg 'def:<&c>You do not have <&6>$<&a>%totalPrice%<&c> for these items!' instantly
      - queue clear
      }
    - take money qty:%totalPrice%
    - give money qty:%totalPrice% player:<server.flag[dRestaurant.%restaurant%.Owner].as_player>
    - inventory close
    - note remove 'as:<def[GUI]>'
    - flag player dRestaurant_Order:%restaurant%/%order%/true
    - event "order placed" context:player|<player>
    - run s@dRestaurantMsg 'def:<&6>$<&a>%totalPrice% <&f>has been deducted from you account.' instantly
    - run s@dRestaurantMsg 'def:<&f>A waitress will collect your menu soon.' instantly
#
#
#--------------------------------------
#
#  Management Buttons
#
dRestaurant_Button_MenuEdit:
  type: item
  material: i@book_and_quill
  display name: <&f>Edit Menu
#  lore:
#    - "<&b>Click to edit your menu"
#    - ""
  script:
    - note remove 'as:<def[GUI]>'
    - inject s@dRestaurantMenu p:display_MenuEdit

dRestaurant_Button_ManageStaff:
  type: item
  material: i@human_skull
  display name: <&f>Manage Staff
#  lore:
#    - "<&b>Click to manage your staff"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly
    - note remove 'as:<def[GUI]>'
    - inject s@dRestaurantMenu p:display_ManageStaff

dRestaurant_Button_ManageStaff_EditWaitress:
  type: item
  material: i@human_skull
  display name: <&f>menu
#  lore:
#    - "<&b>Click to edit this Waitress"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_ManageStaff_EditChef:
  type: item
  material: i@human_skull
  display name: <&f>menu
#  lore:
#    - "<&b>Click to edit this Chef"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_ManageStaff_HireWaitress:
  type: item
  material: i@human_skull
  display name: <&f>Hire a Waitress
#  lore:
#    - "<&b>Click to hire a new Waitress"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_ManageStaff_HireChef:
  type: item
  material: i@human_skull
  display name: <&f>Hire a Chef
#  lore:
#    - "<&b>Click to hire a new Chef"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_ManageStaff_SetSpawn:
  type: item
  material: i@map
  display name: <&f>Set Spawn
#  lore:
#    - "<&b>Click to set your current"
#    - "<&b>location as the NPC spawn"
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_ManageInventory:
  type: item
  material: i@chest
  display name: <&f>Manage Inventory
#  lore:
#    - "<&b>Click to manage your inventory"
#    - ""
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly

dRestaurant_Button_EquipmentChecks:
  type: item
  material: i@furnace
  display name: <&f>Equipment Check
#  lore:
#    - "<&b>Click to check your restaurant"
#    - "<&b>for valid kitchen equipment"
  script:
    - run s@dRestaurantMsg 'def:<&f>This button has not been made yet.' instantly
    - note remove 'as:<def[GUI]>'
    - inject s@dRestaurantMenu p:display_EquipmentChecks

#
#  END Menu Buttons
#--------------------------------------
#
#  Food items
#
dRestaurant_food_potato:
  type: item
  material: i@baked_potato
  display name: <&b>Baked Potato
  lore:
    - A tasty Baked Potato
    - prepared by a Master Chef
  price: 5
  ingredients:
    - potato_item
  foodLevel: 5
  saturation: 7.2
  health: 0
  effects: []

  cook:
    - ^lookclose <npc> state:false
    - ^define foodItems li@potato_item
    - ^inject s@dRestaurant p:getFood_FancyFridge
    - ^inject s@dRestaurant p:washFood
    - ^inject s@dRestaurant p:prepFood
    - ^define foodItem baked_potato
    - ^inject s@dRestaurant p:bakeFood_Attended
    - ^lookclose <npc> state:true
    - ^define foodItems li@baked_potato
    - ^inject s@dRestaurant p:deliverFood_chef


dRestaurant_food_steak:
  type: item
  material: i@cooked_beef
  display name: <&b>Steak
  lore:
    - A tasty Steak prepared
    - by a Master Chef
  price: 15
  ingredients:
    - raw_beef
  foodLevel: 8
  saturation: 12.8
  health: 0
  effects: []

  cook:
    - ^lookclose <npc> state:false
    - ^define foodItems li@raw_beef
    - ^inject s@dRestaurant p:getFood_FancyFridge
    - ^inject s@dRestaurant p:prepFood
    - ^define rawFood raw_beef
    - ^define cookedFood cooked_beef
    - ^define cookTime 30
    - ^inject s@dRestaurant p:grillFood_Attended
    - ^lookclose <npc> state:true
    - ^define foodItems li@cooked_beef
    - ^inject s@dRestaurant p:deliverFood_chef

dRestaurant_food_stew:
  type: item
  material: i@mushroom_soup
  display name: <&b>Mushroom Stew
  lore:
    - A tasty Mushroom Stew
    - prepared by a Master Chef
  comment: Going to use the stew as the test bed for intermediate level recipes
  price: 15
  ingredients:
    - brown_mushroom
    - red_mushroom
  foodLevel: 10
  saturation: 12
  health: 0
  effects:
    - SPEED/30/3

  consume:
    - narrate format:TBFormat "That was a tasty <c.item.display>"
    - adjust <player> 'saturation:<player.saturation.add[<c.item.scriptname.as_script.yaml_key[saturation]>]||0>'
    - adjust <player> 'food_level:<player.food_level.add[<c.item.scriptname.as_script.yaml_key[foodLevel]>]||0>'
    - adjust <player> 'health:<player.health.add[<c.item.scriptname.as_script.yaml_key[health]>]||0>'
    - foreach '<c.item.scriptname.as_script.yaml_key[effects]>]>' {
      - define potion '<def[value].split[/].as_list>'
      - cast '<def[potion].get[1]>' 'd:<def[potion].get[2]||20>s' 'p:<def[potion].get[3]||1>' <player>
      }

  cook:
    - ^define foodItems li@brown_mushroom|red_mushroom
    - ^inject s@dRestaurant p:getFood_FancyFridge
    - ^inject s@dRestaurant p:washFood
    - ^inject s@dRestaurant p:prepFood
    - ^define rawFood bowl
    - ^define cookedFood mushroom_soup
    - ^define cookTime 30
    - ^inject s@dRestaurant p:boilFood_Unattended

  cookComplete:
    - ^inject s@dRestaurant p:boilFood_Unattended_Get
    - ^define foodItems li@mushroom_soup
    - ^inject s@dRestaurant p:deliverFood_chef

dRestaurant_food_bread:
  type: item
  material: i@bread
  display name: <&b>Loaf of Bread
  lore:
    - A tasty Loaf of Bread
    - prepared by a Master Chef
  comment: Going to use the stew as the test bed for intermediate level recipes
  price: 15
  ingredients:
    - wheat
    - wheat
    - wheat
  foodLevel: 5
  saturation: 6
  health: 0
  effects: []

  cook:
    - ^define foodItems li@wheat
    - ^inject s@dRestaurant p:getFood_FancyFridge
    - ^inject s@dRestaurant p:prepFood
    - ^define cookedFood bread
    - ^define cookTime 45
    - ^inject s@dRestaurant p:bakeFood_Unattended

  cookComplete:
    - ^inject s@dRestaurant p:bakeFood_Unattended_Get
    - ^define foodItems li@bread
    - ^inject s@dRestaurant p:deliverFood_chef



#
#--------------------------------------
#
#
#  END DRESTAURANT FOOD ITEMS
#______________________________________
