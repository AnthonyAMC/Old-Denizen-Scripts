################################################################################
#
#  Master Chef Assignment Script
#
# The Chef cooks food.
#
MasterChefNPC:
  type: assignment
  speed: 1t
  debug: true

  actions:
    on assignment:
      - run locally assignment instantly
    on remove assignment:
      - run locally unassign instantly
    on spawn:
      - run locally spawn instantly
    on despawn:
      - run locally despawn instantly delay:5s
    on click:
      - run locally click instantly
    on damage:
      - run locally damage instantly
    on chat:
      - wait 10t
      - inject locally chat instantly

    on order in:
    # Custom action sent from the waitress after a player places an order.
    # Each menu item should come in as an individual order.
    # Orders should be queued in a FIFO manner.
    # Should write a utility that checks if the kitchen has the required food
    # items for the order.
      # - inject locally checkStock
      - define ticketNumber '<c.ticket>'
      - flag npc OrderQueue:->:%ticketNumber%
      - define tickets '<server.flag[dRestaurantTickets].as_list||null>'
      - define ticket '<def[tickets].get[<def[tickets].get_sub_items[1].split_by[/].find[%ticketNumber%]>]||null>'
      - if <def[ticket].is[==].to[null]> {
        - announce "<&b>dRestaurant<&co> <&c>Something went wrong!" to_console
        - announce "<&b>dRestaurant<&co> <&3>Ticket <&b>%ticketNumber%<&3> was not found in RestaurantTickets" to_console
        - queue clear
        }
      # Let the chef decide what to do based on status
      - define chef '<def[ticket].split_by[/].get[3].as_npc>'
      - inject locally orderin_<def[chef].flag[Status]||drunk>

    on cook complete:
    # Custom action sent when an unattended cooking operation has completed.
    # - ^action "cook complete" context:ticket|%ticketNumber%|equipmentLoc|%stove%|walkLoc|%walkLoc%|displayEntity|<entry[cookedFood].dropped>|cookedFood|%cookedFood%
      - define ticketNumber '<c.ticket>'
      - define tickets '<server.flag[dRestaurantTickets].as_list||null>'
      - define ticket '<def[tickets].get[<def[tickets].get_sub_items[1].split_by[/].find[%ticketNumber%]>]||null>'
      - if <def[ticket].is[==].to[null]> {
        - announce "<&b>dRestaurant<&co> <&c>Something went wrong!" to_console
        - announce "<&b>dRestaurant<&co> <&3>Ticket <&b>%ticketNumber%<&3> was not found in RestaurantTickets" to_console
        - queue clear
        }
      - define chef '<def[ticket].split_by[/].get[3].as_npc>'
      - define equipmentLoc '<c.equipmentLoc>'
      - define walkLoc '<c.walkLoc>'
      - define displayEntity '<c.displayEntity>'
      - define cookedFood '<c.cookedFood>'
      - flag npc DeliveryQueue:->:%ticketNumber%/%equipmentLoc%/%walkLoc%/%displayEntity%/%cookedFood%
      - inject locally cookComplete_<def[chef].flag[Status]||drunk>


  assignment:
    - trigger name:chat state:true radius:5 cooldown:5s
    - trigger name:click state:true radius:5 cooldown:5s
    - trigger name:proximity state:false
    - trigger name:damage state:true radius:5 cooldown:5s
    - vulnerable state:false
    - lookclose true range:5 realistic
    - flag npc respawn_location:<npc.location>
    - inject s@MasterWaitressNPC p:findRestaurant instantly
    - define wait '5'
    - define radius '15'
    - define speed '0.8'
    - define location '<npc.location>'
    - define height '1'
    - define materials '<npc.location.standing_on.material.name>'
    - flag npc Pathfind:!
    - flag npc dRestaurant_FidgetValues:!
    - flag npc dRestaurant_FidgetValues:|:%restaurant%|%wait%|%radius%|%speed%|%location%|%height%|%materials%
    - flag npc OrderQueue:!
    - flag npc DeliveryQueue:!
    - inject locally spawn instantly

  unassign:
    - flag npc respawn_location:!
    - flag npc Pathfind:!
    - flag npc dRestaurant_FidgetValues:!
    - flag npc OrderQueue:!
    - flag npc DeliveryQueue:!
    - despawn

  spawn:
    - narrate format:GenericNPCFormat "Alright, time to start work..." targets:<npc.location.find.players.within[5]||null>
    - if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - if <queue.exists[processOrder_<npc.id>]> queue queue:processOrder_<npc.id> stop
    - run s@MasterChefNPC p:processOrderQueue id:processOrder_<npc.id>

  despawn:
    - if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - if <queue.exists[processOrder_<npc.id>]> queue queue:processOrder_<npc.id> stop
    - narrate format:GenericNPCFormat "Phew... I<&sq>m glad to be done work for the day!" targets:<npc.location.find.players.within[5]||null>

  damage:
    - narrate format:GenericNPCFormat "Why would you do that?" targets:<npc.location.find.players.within[5]||null>

  click:
    - narrate format:GenericNPCFormat "I don<&sq>t have anything to say right now." targets:<npc.location.find.players.within[5]||null>

  chat:
    - if <npc.owner.is[!=].to[<player>]> {
      - narrate format:GenericNPCFormat "I don<&sq>t know you like that."
      - queue stop
      }
    - narrate format:GenericNPCFormat "Ok, so you want me to find something... sure."
    - define options li@smartWindow|window
    - define equipment '<c.message.split[ ].get[1]>'
    - define restaurant '<c.message.split[ ].get[2].escaped||<npc.location.cuboids.random||null>>'
    - if <def[restaurant].is[==].to[null]> {
      - chat "There are no noted cuboids here."
      - queue stop
      }
    - if '<def[options].contains[%equipment%]>' {
      - inject s@dRestaurant p:find%equipment%_chef instantly
      }
      else {
      - chat "I don<&sq>t know anything about %equipment%."
      - chat "<context.message>"
      - queue stop
      }
    - if <def[locations].is_empty> {
      - chat "I couldn<&sq>t find the %equipment%."
      - queue stop
      }
    - chat "I found <def[locations].size.as_int> %equipment%."
    - ~walk <npc> <def[locations].random.as_location> 'speed:0.6' 'radius:2.0'
    - chat "Ok, I made it to the %equipment%."

#
#--------------------------------------
#
#  Logic Utilities
#
#
  processOrderQueue:
  # Run through a list of orders waiting to be cooked. Rinse and repeat until
  # the queue is cleared.
    - ^if !<npc.is_spawned||false> queue clear
    - ^flag npc status:cooking
    - ^lookclose <npc> state:false
    - ^define fidgetValues '<npc.flag[dRestaurant_FidgetValues].as_list||null>'
    - ^define restaurant '<def[fidgetValues].get[1]||null>'
    - ^inject s@MasterWaitressNPC p:findRestaurant instantly
    - ^define orderQueue <npc.flag[OrderQueue].as_list||null>
    - ^if !<def[orderQueue].is_empty||true> {
      - narrate format:GenericNPCFormat "Ok, I have work to do." targets:<npc.location.find.players.within[5]||null>
      - define range <npc.flag[dRestaurant_SearchRadius]||30>
      - define speed <npc.flag[dRestaurant_WorkSpeed]||0.8>
      - foreach %orderQueue% {
        - define ticketNumber %value%
        - define tickets '<server.flag[dRestaurantTickets].as_list>'
        - define ticket '<def[tickets].get[<def[tickets].get_sub_items[1].split_by[/].find[%ticketNumber%]>]>'
        - define player '<def[ticket].split_by[/].get[4].as_player>'
        - define food '<def[ticket].split_by[/].get[5]>'
        - inject <def[food].scriptname.as_script> p:cook
        - flag npc OrderQueue:<-:%ticketNumber%
        - wait 10t
        - if !<npc.flag[DeliveryQueue].as_list.is_empty||true> {
          - inject processDeliveryQueue locally
          }
        }
      - if !<npc.flag[OrderQueue].as_list.is_empty||true> {
        - inject processOrderQueue locally
        }
      }
    - ^if !<npc.flag[DeliveryQueue].as_list.is_empty||true> {
      - inject processDeliveryQueue locally
      }
    - ^if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - ^lookclose <npc> state:true
    - ^run s@dRestaurant p:idleQueue_Chef id:idleQueue_Chef_<npc.id> delay:2t
    - ^queue clear

  processDeliveryQueue:
  # Run through a list of orders waiting to be delivered. Rinse and repeat until
  # the queue is cleared.
  # - flag npc DeliveryQueue:->:%ticketNumber%/%equipmentLoc%/%walkLoc%/%displayEntity%/%cookedFood%
    - ^if !<npc.is_spawned||false> queue clear
    - ^flag npc Status:deliver
    - ^lookclose <npc> state:false
    - ^define fidgetValues '<npc.flag[dRestaurant_FidgetValues].as_list||null>'
    - ^define restaurant '<def[fidgetValues].get[1]||null>'
    - ^inject s@MasterWaitressNPC p:findRestaurant instantly
    - ^define deliveryQueue <npc.flag[DeliveryQueue].as_list||null>
    - ^if !<def[deliveryQueue].is_empty||true> {
      - narrate format:GenericNPCFormat "Food to deliver." targets:<npc.location.find.players.within[5]||null>
      - define range <npc.flag[dRestaurant_SearchRadius]||30>
      - define speed <npc.flag[dRestaurant_WorkSpeed]||0.8>
      - foreach %deliveryQueue% {
        - define deliveryObject %value%
        - define ticketNumber '<def[deliveryObject].split_by[/].get[1]>'
        - define equipmentLoc '<def[deliveryObject].split_by[/].get[2]>'
        - define walkLoc '<def[deliveryObject].split_by[/].get[3]>'
        - define displayEntity '<def[deliveryObject].split_by[/].get[4]>'
        - define cookedFood '<def[deliveryObject].split_by[/].get[5]>'
        - define tickets '<server.flag[dRestaurantTickets].as_list>'
        - define ticket '<def[tickets].get[<def[tickets].get_sub_items[1].split_by[/].find[%ticketNumber%]>]>'
        - define player '<def[ticket].split_by[/].get[4].as_player>'
        - define food '<def[ticket].split_by[/].get[5]>'
        - inject <def[food].scriptname.as_script> p:cookComplete
        - flag npc DeliveryQueue:<-:%deliveryObject%
        - wait 10t
        - if !<npc.flag[OrderQueue].as_list.is_empty||true> {
          - inject processOrderQueue locally
          }
        }
      - if !<npc.flag[DeliveryQueue].as_list.is_empty||true> {
        - inject processDeliveryQueue locally
        }
      }
    - ^if !<npc.flag[OrderQueue].as_list.is_empty||true> {
      - inject processOrderQueue locally
      }
    - ^lookclose <npc> state:true
    - ^if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - ^run s@dRestaurant p:idleQueue_Chef id:idleQueue_Chef_<npc.id> delay:2t
    - ^queue clear


#
#  END Logic Utilities
#
#--------------------------------------
#
#  MasterChef Status Actions
#
# We're using an NPC status system for action responses. This is a low latency
# and low load method that allows for very fast NPC reactions since they do not
# have to do ANY comparisons. They just run the correct subscript based on the
# action and their current status.
#
#
#--------------------------------------
#  Order In Responses
#
  orderin_drunk:
  # A catchall if something derps
    - flag npc status:drunk
    - if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - random {
      - narrate format:GenericNPCFormat "I quit!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I<&sq>m done with this place!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I should have called out!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I had way too much to drink last night..." targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I<&sq>m not feeling well... I have to go." targets:<npc.location.find.players.within[5]||null>
      }
    - wait 2s
    - despawn <npc>

  orderin_idle:
  # When the Chef is running his idleQueue
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "Ticket %ticketNumber% heard" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "I<&sq>ll get right on that!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Ok, time to work." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Watch out folks, I<&sq>ve got stuff to do!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Oh... someone<&sq>s hungry!" targets:<npc.location.find.players.within[5]||null>
        }
      }

  orderin_cooking:
  # When the Chef is cooking food
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "Ticket %ticketNumber% heard, but I<&sq>m already cooking something." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "C<&sq>mon man... I<&sq>m already working here..." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "These orders just keep coming!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Walking in..." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Listen up!" targets:<npc.location.find.players.within[5]||null>
        }
      }

  orderin_deliver:
  # When the Chef is delivering food
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "Ticket %ticketNumber% heard, but I<&sq>m delivering food right now." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Man my hands are full!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Peeps be cray." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "More orders coming in fellas!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "We<&sq>ve got another one!" targets:<npc.location.find.players.within[5]||null>
        }
      }

#
#--------------------------------------
#  Cook Complete Responses
#
  cookComplete_drunk:
  # A catchall if something derps
    - flag npc status:drunk
    - if <queue.exists[idleQueue_Chef_<npc.id>]> queue queue:idleQueue_Chef_<npc.id> stop
    - random {
      - narrate format:GenericNPCFormat "I quit!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I<&sq>m done with this place!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I should have called out!" targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I had way too much to drink last night..." targets:<npc.location.find.players.within[5]||null>
      - narrate format:GenericNPCFormat "I<&sq>m not feeling well... I have to go." targets:<npc.location.find.players.within[5]||null>
      }
    - wait 2s
    - despawn <npc>

  cookComplete_idle:
  # When the Chef is running his idleQueue
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "I hope nobody don<&sq>t see dat hair!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Boy, I cooks good!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Times to gets dem foods." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Now that<&sq>s good eats." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Bam!" targets:<npc.location.find.players.within[5]||null>
        }
      }

  cookComplete_cooking:
  # When the Chef is cooking food
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "Oh fizzle bums, I<&sq>m about to burn that food!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Burnt food is NOT good eats!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "I hope they like it crispy." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "We<&sq>ll just tell them it<&sq>s supposed to be blackend." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "I<&sq>m in the weeds!" targets:<npc.location.find.players.within[5]||null>
        }
      }

  cookComplete_deliver:
  # When the Chef is delivering food
    - if <util.random.int[1].to[10].is[OR_MORE].than[7]> {
      - random {
        - narrate format:GenericNPCFormat "I<&sq>m running as fast as I can!" targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Gotta run dis food first brah." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Boy... you be trippin." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Hey man, grab dat food." targets:<npc.location.find.players.within[5]||null>
        - narrate format:GenericNPCFormat "Yo, that<&sq>s about to burn!" targets:<npc.location.find.players.within[5]||null>
        }
      }

#
#  END MasterWaitress Status Actions
#--------------------------------------
#
#
#  END MASTERCHEF ASSIGNMENT SCRIPT CONTAINER
#
